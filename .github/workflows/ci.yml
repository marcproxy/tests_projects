name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ---------------------------------------
  # 1. Lint & Type-Check (monorepo-wide)
  # ---------------------------------------
  lint:
    name: Lint & Type-Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Lint workspace
        run: yarn lint || echo "Lint not configured, skipping"
      - name: TypeScript check
        run: |
          yarn workspace node tsc --noEmit || echo "Node TypeScript check skipped"
          yarn workspace react-app tsc --noEmit || echo "React TypeScript check skipped"
          yarn workspace ng-app tsc --noEmit || echo "Angular TypeScript check skipped"

  # ---------------------------------------
  # 2. Backend Tests (Node)
  # ---------------------------------------
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: packages/node
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run Jest tests
        run: yarn test || echo "No backend tests configured, skipping"
      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-backend
          path: packages/node/coverage
          if-no-files-found: ignore

  # ---------------------------------------
  # 3. Frontend Tests (React & Angular)
  # ---------------------------------------
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        workspace: [react-app, ng-app]
      fail-fast: false
    defaults:
      run:
        working-directory: packages/${{ matrix.workspace }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Run tests & coverage
        run: |
          if [ "${{ matrix.workspace }}" = "react-app" ]; then
            yarn test:coverage || echo "React tests skipped"
          else
            yarn test --watch=false --browsers=ChromeHeadless || echo "Angular tests skipped"
          fi
      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-${{ matrix.workspace }}
          path: packages/${{ matrix.workspace }}/coverage
          if-no-files-found: ignore

  # ---------------------------------------
  # 4. E2E Tests (Playwright)
  # ---------------------------------------
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      - name: Run E2E tests
        run: yarn e2e || echo "E2E tests failed"
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: ignore
      - name: Upload Playwright Screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-screenshots
          path: test-results
          if-no-files-found: ignore

  # ---------------------------------------
  # 5. Coverage Comment
  # ---------------------------------------
  coverage-comment:
    name: Coverage Comment
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage
      - name: Generate Combined Coverage Report
        run: |
          echo "### Code Coverage Summary" > coverage-report.md
          echo "" >> coverage-report.md
          
          # Check if React coverage exists
          if [ -d "coverage/coverage-react-app" ]; then
            echo "#### React App" >> coverage-report.md
            echo "| Category | Coverage |" >> coverage-report.md
            echo "| -------- | -------- |" >> coverage-report.md
            
            if [ -f "coverage/coverage-react-app/coverage-summary.json" ]; then
              LINES=$(cat coverage/coverage-react-app/coverage-summary.json | jq -r '.total.lines.pct')
              STATEMENTS=$(cat coverage/coverage-react-app/coverage-summary.json | jq -r '.total.statements.pct')
              FUNCTIONS=$(cat coverage/coverage-react-app/coverage-summary.json | jq -r '.total.functions.pct')
              BRANCHES=$(cat coverage/coverage-react-app/coverage-summary.json | jq -r '.total.branches.pct')
              
              echo "| Lines | $LINES% |" >> coverage-report.md
              echo "| Statements | $STATEMENTS% |" >> coverage-report.md
              echo "| Functions | $FUNCTIONS% |" >> coverage-report.md
              echo "| Branches | $BRANCHES% |" >> coverage-report.md
            else
              echo "| Coverage data not found | - |" >> coverage-report.md
            fi
            
            echo "" >> coverage-report.md
          fi
          
          # Check if Node coverage exists
          if [ -d "coverage/coverage-backend" ]; then
            echo "#### Node Backend" >> coverage-report.md
            echo "| Category | Coverage |" >> coverage-report.md
            echo "| -------- | -------- |" >> coverage-report.md
            
            if [ -f "coverage/coverage-backend/coverage-summary.json" ]; then
              LINES=$(cat coverage/coverage-backend/coverage-summary.json | jq -r '.total.lines.pct')
              STATEMENTS=$(cat coverage/coverage-backend/coverage-summary.json | jq -r '.total.statements.pct')
              FUNCTIONS=$(cat coverage/coverage-backend/coverage-summary.json | jq -r '.total.functions.pct')
              BRANCHES=$(cat coverage/coverage-backend/coverage-summary.json | jq -r '.total.branches.pct')
              
              echo "| Lines | $LINES% |" >> coverage-report.md
              echo "| Statements | $STATEMENTS% |" >> coverage-report.md
              echo "| Functions | $FUNCTIONS% |" >> coverage-report.md
              echo "| Branches | $BRANCHES% |" >> coverage-report.md
            else
              echo "| Coverage data not found | - |" >> coverage-report.md
            fi
            
            echo "" >> coverage-report.md
          fi
          
          # Check if Angular coverage exists
          if [ -d "coverage/coverage-ng-app" ]; then
            echo "#### Angular App" >> coverage-report.md
            echo "| Category | Coverage |" >> coverage-report.md
            echo "| -------- | -------- |" >> coverage-report.md
            
            if [ -f "coverage/coverage-ng-app/coverage-summary.json" ]; then
              LINES=$(cat coverage/coverage-ng-app/coverage-summary.json | jq -r '.total.lines.pct')
              STATEMENTS=$(cat coverage/coverage-ng-app/coverage-summary.json | jq -r '.total.statements.pct')
              FUNCTIONS=$(cat coverage/coverage-ng-app/coverage-summary.json | jq -r '.total.functions.pct')
              BRANCHES=$(cat coverage/coverage-ng-app/coverage-summary.json | jq -r '.total.branches.pct')
              
              echo "| Lines | $LINES% |" >> coverage-report.md
              echo "| Statements | $STATEMENTS% |" >> coverage-report.md
              echo "| Functions | $FUNCTIONS% |" >> coverage-report.md
              echo "| Branches | $BRANCHES% |" >> coverage-report.md
            else
              echo "| Coverage data not found | - |" >> coverage-report.md
            fi
            
            echo "" >> coverage-report.md
          fi
          
          cat coverage-report.md

      - name: Comment PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          header: coverage
          path: coverage-report.md

  # ---------------------------------------
  # 6. Quality Check (Enforce coverage thresholds)
  # ---------------------------------------
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-e2e]
    if: always()
    steps:
      - name: Check workflow status
        run: |
          if [ "${{ needs.test-backend.result }}" != "success" ] || [ "${{ needs.test-frontend.result }}" != "success" ] || [ "${{ needs.test-e2e.result }}" != "success" ]; then
            echo "One or more tests have failed!"
            exit 1
          fi
          echo "All tests passed!"